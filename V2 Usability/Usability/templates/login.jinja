<!-- Login page -->
{% extends 'base.jinja' %}

{% block content %} 
    <div class="login-container">
        <h1>Login</h1>
        <div class="form-group">
            <label for="username">Username:</label>
            <input id="username" type="text" class="form-control" required>
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <input id="password" type="password" class="form-control" required>
        </div>
        <button onclick="login()" class="btn btn-primary">Let's login!</button>
    </div>

    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: monospace;
        }

        .login-container {
            max-width: 400px;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 8px;
            background-color: #f9f9f9;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            font-family: monospace;
            text-align: center;
        }

        .form-group {
            margin-bottom: 20px;
            font-family: monospace;
        }

        label {
            font-weight: bold;
        }

        input[type="text"],
        input[type="password"] {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            box-sizing: border-box;
            font-family: monospace;
        }

        button {
            padding: 10px 20px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            background-color: #007bff;
            color: #fff;
            font-size: 16px;
            transition: background-color 0.3s;
            font-family: monospace;
        }

        button:hover {
            background-color: #0056b3;
            font-family: monospace;
        }
    </style>


    <script>

        // Function to hash the password using SHA-256
        async function hashPassword(password) {
            let hashedPassword = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(password));
            return Array.from(new Uint8Array(hashedPassword)).map(byte => byte.toString(16).padStart(2, '0')).join('');
        }

        async function deriveSymmetricKey(password, salt) {
            const iterations = 100000;
            const keyLength = 256;
            // Derive the key using PBKDF2
            let derivedKey = await crypto.subtle.importKey(
                'raw', 
                new TextEncoder().encode(password),
                { name: 'PBKDF2' },
                false,
                ['deriveBits']
            );
            let key = await crypto.subtle.deriveBits(
                { name: 'PBKDF2', salt: new TextEncoder().encode(salt), iterations: iterations, hash: 'SHA-256' },
                derivedKey,
                keyLength
            );
            return key;
        }

        // function to store the symmetric key in sessionStorage
        function storeSymmetricKey(key) {
            let keyBytes = new Uint8Array(key);
            sessionStorage.setItem('symmetricKey', JSON.stringify(Array.from(keyBytes)));
        }

        // function to check if the response is a valid URL
        function isValidURL(string) {
            if (string.length == 0) {
                return false;
            }
            if (string[0] == "/") {
                return true;
            }
            return false;
        }
        function sanitizeInput(input) {
            return input.replace(/<[^>]*>?/gm, '');
        }

        
        // Login function
        async function login() {
            let username = sanitizeInput($("#username").val());
            let password = sanitizeInput($("#password").val());

            let loginURL = "{{ url_for('login_user') }}";

            let hashedPassword = await hashPassword($("#password").val());

            let res = await axios.post(loginURL, {
                username: $("#username").val(),
                password: hashedPassword
            });

            // Check if the server response is a valid URL
            if (!isValidURL(res.data)) {
                alert(res.data);
                return;
            }

            // Use the username as the salt
            let salt = $("#username").val();
            
            // Derive a symmetric encryption key from the hashed password and the username as the salt
            let symmetricKey = await deriveSymmetricKey(hashedPassword, salt);
            storeSymmetricKey(symmetricKey);

            // Redirect to the URL returned by the server
            window.open(res.data, "_self")
        }
    </script>
{% endblock %}