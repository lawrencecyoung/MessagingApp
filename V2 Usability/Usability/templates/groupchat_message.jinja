<!-- 
    Here you'll find the main exhibit: the chat application code. Feel free to look around!
-->
{% extends 'base.jinja' %}

{% block content %} 
   <style>
    body {
        font-family: monospace;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }

    nav {
        background-color: #004a9a;
        color: #fff;
        border-bottom: 2px solid #000;
        overflow: auto;
        padding: 20px;
        font-family: monospace;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    nav ol {
        margin: 0;
        padding: 0;
    }

    nav li {
        display: inline-block;
        margin: 0 10px;
        font-size: 15px;
    }

    main {
        max-width: 1000px;
        margin: 20px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 5px;
    }

    h1 {
        color: #006ce0;
        text-align: center;
        font-size: 40px;
        font-family: monospace;
    }

    button {
        padding: 6px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 10px;
        margin-left: 10px;
        font-family: monospace;
    }

    button#returnButton {
        padding: 8px 16px;
        background-color: #006ce0; 
        border: none;
        color: #fff; 
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.3s;
        font-family: monospace;
    }

    button#returnButton:hover {
        background-color: #002b55;
        font-family: monospace;
    }

    button#goToRepoButton {
        padding: 8px 16px;
        background-color: #2a91ff; 
        border: none;
        color: #fff; 
        font-size: 16px;
        cursor: pointer;
        border-radius: 4px;
        transition: background-color 0.3s;
        font-family: monospace;
    }

    button#goToRepoButton:hover {
        background-color: #002b55;
    }

    section {
        margin-bottom: 20px;
    }

    input[type="text"] {
        width: calc(100% - 70px);
        padding: 10px;
        margin-top: 5px;
        margin-bottom: 10px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
        font-size: 16px;
    }

    #message_box {
        border: 1px solid #ccc; 
        height: 400px; 
        width: 98%; 
        overflow: auto;
        padding: 10px;
        margin-bottom: 20px;
        border-radius: 4px;
    }

    #message {
        width: 300px;
        height: 10px;
        padding: 10px; 
        border: 1px solid #ccc; 
        border-radius: 5px;
        font-size: 14px; 
        color: #333; 
        background-color: #f9f9f9; 
        font-family: monospace;
    }


    ul {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    ul li {
        margin-bottom: 5px;
    }

    .deleteButton {
        background-color: #dc3545;
        color: #fff;
        padding: 5px 10px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
    }

    .deleteButton:hover {
        background-color: #c82333;
    }

    #friendDropdown {
        width: 150px;
        height: 40px;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
        color: #333;
        background-color: #f9f9f9;
        font-family: monospace;
    }


</style>

<!--Navbar, you'll see the username here-->
<nav>
    <ol style="float: left">
        <li style="display:inline-block"><button id="returnButton">Home</button></li>
        <li style="display:inline-block"><button id="goToRepoButton">Repository Hub</button></li>
    </ol>
    <ol style="float: right">
        <li style="display:inline-block">Username:  {{ username }} ({{ role }})</li>
    </ol>   
</nav>

<main>
    <h1>{{ groupchat_name }}</h1>

    <!-- The messages are displayed here -->
    <section id="message_box"></section>
    
    {% if not muted %}
    <!-- These part ideally should be a form element, 
    but I wrote this code a year ago and I don't want to break anything...-->
    <section id="chat_box">
        <p class="text">Chat with: </p>
        <input id="receiver" placeholder="username">
        <!-- MDN says its bad practice to use the onclick attribute,
        but we're using it anyways coz its easy :)-->
        <button onclick="join_room()">Chat</button>
    </section>

    <!-- The (message) input box is set to display: none initially, 
    this means the input box is "invisible" initially-->
    <section id="input_box" style="display: none" >
        <p class="text"><strong>Message:</strong></p>
        <input id="message" placeholder="message">
        <button onclick="send()">Send</button>
        <select id="friendDropdown"></select>
        <button id="addUserButton">Add User</button>
    </section>
    {% endif %}

    {% if muted %}
        <!-- Warning message for muted user -->
        <div style="background-color: #ffcccc; color: #cc0000; padding: 10px; margin-bottom: 20px;">
            <strong>Warning:</strong> You have been muted. You cannot send message.
        </div>
    {% endif %}

    <section id="user_list">
        <h2>Users in Group Chat:</h2>
        <ul id="user_list_items"></ul>
    </section>

</main>

<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.1.1/crypto-js.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jsencrypt/3.0.0-rc.1/jsencrypt.min.js"></script>
<script src="/static/js/libs/socket.io.min.js"></script>
<script>

    let room_id = 0;


    // when the user presses the "Enter" key inside of the "message box", 
    // the message is sent to the server
    $("#message").on("keyup", (e) => {
        if (e.key == "Enter") {
            send();
        }
    })

    // when the user presses the enter key inside of the "receiver box"
    // the user joins a (socket) room
     $("#receiver").on("keyup", (e) => {
        if (e.key == "Enter") {
            join_room();
        }
    })

    $(document).ready(() => {
        // room_id is undefined if the user hasn't joined a room
        // we early return in this case
        if (Cookies.get("room_id") == undefined) {
            return;
        }

        // the user has already joined an existing room
        // we'll display the input box, instead of the "Chat with: " box
        $("#chat_box").hide();
        $("#input_box").show();
        room_id = parseInt(Cookies.get("room_id"));
    })
    
    // Here's the Socket IO part of the code
    // things get a bit complicated here so brace yourselves :P
    let username = "{{ username }}";
    let chat_id = parseInt("{{ chat_id }}")+1000;
    let groupchat_name = "{{ groupchat_name }}";
    let usersInGroupChat = [];
    let usersInGroupChatList = []

    let role = "{{ role }}";
    let muted = "{{ muted }}";
    Cookies.set("room_id", chat_id);

    const socket = io();

    $('#friendDropdown').empty();


    socket.on('connect', () => {
        join_room(chat_id);
    });

    Cookies.set('username', username);


    socket.emit('get_users_in_groupchat', chat_id)

    socket.on('fetched_users_in_groupchat', function(users) {
        usersInGroupChat = users;
        for (const user of usersInGroupChat) {
            usersInGroupChatList.push(user[0])
        }
        const userList = document.getElementById('user_list_items');

        // clear the existing list
        userList.innerHTML = '';

        usersInGroupChat.forEach(user => {
            const listItem = document.createElement('li');
            listItem.textContent = `${user[0]} (${user[1]} : ${user[2]})`;
            userList.appendChild(listItem);
        });
    });

    {% if role == 'Student' %}
        socket.emit('fetch_friends', username);
    {% endif %}

    

    socket.on('friends_fetched', function(data) {
        let friendData = data.friend_data;
        let friendDropdown = $('#friendDropdown');

        for (let username in friendData) {
            if (!usersInGroupChatList.includes(username)) {
                friendDropdown.append(`<option value="${username}">${username}</option>`);
            }
        }
    });


    {% if role != 'Student' %}
        socket.emit('fetch_all_users');
    {% endif %}

    socket.on('users_fetched', (data) => {
        const usersList = data.users_list; 
        const friendDropdown = $('#friendDropdown');

        friendDropdown.empty();

        Object.entries(usersList).forEach(([username, user]) => {
            if (user.username !== username) {
                if (!usersInGroupChatList.includes(username)) {
                    friendDropdown.append(`<option value="${username}">${username}</option>`);
                }
            }
        });
    });


    // an incoming message arrives, we'll add the message to the message box
    socket.on("incoming", (msg, color="black") => {
        add_message(msg, color);
    })
    
    // we'll send the message to the server by emitting a "send" event
    function send() {
        let message = $("#message").val();
        $("#message").val("");
        socket.emit("send_groupchat", username, message, chat_id);  
    } 

    // we emit a join room event to the server to join a room
    function join_room(chat_id) {

        // pass in the receiver of our message to the server
        // as well as the current user's username
        socket.emit("join_groupchat", username, chat_id, (res) => {
            // res is a string with the error message if the error occurs
            // this is a pretty bad way of doing error handling, but watevs
            if (typeof res != "number") {
                alert(res);
                return;
            }

            // set the room id variable to the room id returned by the server
            room_id = res;
            // now we'll show the input box, so the user can input their message
            $("#chat_box").hide();
            $("#input_box").show();
        });
    }

    // function when the user clicks on "Leave Room"
    // emits a "leave" event, telling the server that we want to leave the room
    function leave() {
        Cookies.remove("room_id");
        socket.emit("leave_groupchat", username, chat_id);
        $("#input_box").hide();
        $("#chat_box").show();
    }

    // function to add a message to the message box
    // called when an incoming message has reached a client
    function add_message(message, color) {
        let box = $("#message_box");
        let child = $(`<p style="color:${color}; margin: 0px;"></p>`).text(message);
        box.append(child);
    }


    document.getElementById("returnButton").addEventListener("click", function() {
        leave()
        socket.emit('userdisconnect', username);
        window.location.href = "/home";
    });

    document.getElementById("goToRepoButton").addEventListener("click", function() {
        window.location.href = "/repo";
        leave()
    });
    
    {% if not muted %}
    document.getElementById("addUserButton").addEventListener("click", function() {
        let selectedUsername = $('#friendDropdown').val();
        socket.emit("add_user_to_groupchat", chat_id, selectedUsername)
        window.location.href = "/groupchat_message/"+username+"/"+groupchat_name; 
    });
    {% endif %}

</script>

{% endblock %}